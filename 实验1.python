# 导入必备工具包
import seaborn as sns
import pandas as pd
import matplotlib.pyplot as plt
# 设置显示风格
plt.style.use('fivethirtyeight') 
#pandas读取数据
data = pd.read_csv("E:/shuju/data.csv",encoding='gbk')
#获取数据标签数量分布
sns.countplot("label", data=data) #label列计数
plt.title("data")
plt.show()
data.isnull().sum()#查看空值
#空值填充一下，否则后面len()报错
data['sentence'] = data['sentence'].fillna('') 

# 在数据中添加新的句子长度列, 每个元素的值都是对应的句子列的长度
data["sentence_length"] = list(map(lambda x: len(x), data["sentence"]))
# 绘制句子长度列的数量分布图
sns.countplot("sentence_length", data=data)
# 主要关注count长度分布的纵坐标, 不需要绘制横坐标, 横坐标范围通过dist图进行查看
plt.xticks([])
plt.show()
# 绘制dist长度分布图
sns.distplot(data["sentence_length"])

# 主要关注dist长度分布横坐标, 不需要绘制纵坐标
plt.yticks([])
plt.show()
# 绘制数据长度分布的散点图
sns.stripplot(y='sentence_length',x='label',data=data)
plt.show()
# 导入jieba用于分词
# 导入chain方法用于扁平化列表
import jieba
from itertools import chain

# 进行训练集的句子进行分词, 并统计出不同词汇的总数
vocab = set(chain(*map(lambda x: jieba.lcut(x), data["sentence"])))
#set包装--可以去重。chain扁平化列表（多个列表进行合并打印）。map映射
#jieba.lcut(x)分词列表结果，*代表解包
print("数据共包含不同词汇总数为：", len(vocab))
# 使用jieba中的词性标注功能
import jieba.posseg as pseg#分词会给出词性

def get_a_list(text):
    """用于获取形容词列表"""
    # 使用jieba的词性标注方法切分文本,获得具有词性属性flag和词汇属性word的对象, 
    # 从而判断flag是否为形容词,来返回对应的词汇
    r = []
    for g in pseg.lcut(text):
        if g.flag == "a":
            r.append(g.word)#只添加形容词
    return r
# 导入绘制词云的工具包
from wordcloud import WordCloud

#定义获取词云的函数
def get_word_cloud(keywords_list):
    # 实例化绘制词云的类,
    #其中参数font_path是字体路径（微软雅黑包）, 为了能够更好的显示中文
    # max_words指词云图像最多显示多少个词, background_color为背景颜色 
    wordcloud = WordCloud(font_path="E:/shuju/SimHei.ttf",max_words=100, background_color="white")
    # 将传入的列表转化成词云生成器需要的字符串形式。因为词云对象的参数要求是字符串类型
    keywords_string = " ".join(keywords_list)
    # 生成词云
    wordcloud.generate(keywords_string)

    # 绘制图像并显示
    plt.figure() #画布
    plt.imshow(wordcloud, interpolation="bilinear")#线性化的
    plt.axis("off") #不需要坐标
    plt.show() #打印图形

# 获得数据上正样本
p_data = data[data["label"]==1]["sentence"]

# 对正样本的每个句子的形容词
p_a_vocab = chain(*map(lambda x: get_a_list(x), p_data))
#print(train_p_n_vocab)

# 获得数据上负样本
n_data = data[data["label"]==0]["sentence"]

# 获取负样本的每个句子的形容词
n_a_vocab = chain(*map(lambda x: get_a_list(x), n_data))

# 调用绘制词云函数
get_word_cloud(p_a_vocab)
get_word_cloud(n_a_vocab)
